<?xml version="1.0" encoding="UTF-8"?><!--   Copyright (c) 2009, 2011 The University of Memphis.  All rights reserved.    This program and the accompanying materials are made available    under the terms of the LIDA Software Framework Non-Commercial License v1.0    which accompanies this distribution, and is available at   http://ccrg.cs.memphis.edu/assets/papers/2010/LIDA-framework-non-commercial-v1.0.pdf--><lida xmlns="http://ccrg.cs.memphis.edu/LidaXMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"      xsi:schemaLocation="http://ccrg.cs.memphis.edu/LidaXMLSchema LidaXMLSchema.xsd ">    <taskmanager>        <param name="taskManager.tickDuration" type="int">1 </param>        <param name="taskManager.maxNumberOfThreads" type="int"> 100</param>    </taskmanager>    <taskspawners>        <taskspawner name="defaultTS">            <class>edu.memphis.ccrg.lida.framework.tasks.TaskSpawnerImpl</class>        </taskspawner>    </taskspawners>    <submodules>         <module name="Environment">            <class>modules.Environment</class>            <param name="environment.ticksPerRun" type="int">20</param>            <param name="height" type="int"> 10 </param>            <param name="width" type="int">10 </param>            <taskspawner>defaultTS</taskspawner>        </module>        <module name="SensoryMemory">            <class>modules.SensoryMemory</class>            <associatedmodule>Environment</associatedmodule>            <taskspawner>defaultTS</taskspawner>            <initialTasks>                <task name="backgroundTask">                    <tasktype>SensoryMemoryBackgroundTask</tasktype>                    <ticksperrun>5</ticksperrun>                </task>            </initialTasks>        </module>        <module name="PerceptualAssociativeMemory">            <class>edu.memphis.ccrg.lida.pam.PerceptualAssociativeMemoryImpl</class>            <param name="pam.upscale" type="double">.7 </param>            <param name="pam.downscale" type="double">.6 </param>            <param name="pam.selectivity" type="double">.5 </param>            <param name="pam.perceptThreshold" type="double">0.7</param>            <param name="pam.excitationTicksPerRun" type="int">1</param>            <param name="pam.propagationTicksPerRun" type="int">1</param>            <param name="pam.propagateActivationThreshold" type="double">0.05</param>            <param name="nodes">                thingDirection,thingCollided,thingToGet,wallFront,rotate,random,delivery            </param>            <taskspawner>defaultTS</taskspawner>            <initialTasks>                <task name="ThingDirectionDetector">                    <tasktype>ThingDirectionDetector</tasktype>                    <ticksperrun>3</ticksperrun>                    <param name="node" type="string">thingDirection</param>                    <param name="learnable.baseLevelActivation" type="double">0.0</param>                    <param name="learnable.baseLevelRemovalThreshold" type="double">-1.0</param>                    <param name="learnable.baseLevelDecayStrategy" type="string">defaultDecay</param>                    <param name="learnable.baseLevelExciteStrategy" type="string">defaultExcite</param>                    <param name="learnable.totalActivationStrategy" type="string">DefaultTotalActivationStrategy</param>                </task>                <task name="ThingToGetDetector">                    <tasktype>ThingToGetDetector</tasktype>                    <ticksperrun>3</ticksperrun>                    <param name="node" type="string">thingToGet</param>                    <param name="learnable.baseLevelActivation" type="double">0.0</param>                    <param name="learnable.baseLevelRemovalThreshold" type="double">-1.0</param>                    <param name="learnable.baseLevelDecayStrategy" type="string">defaultDecay</param>                    <param name="learnable.baseLevelExciteStrategy" type="string">defaultExcite</param>                    <param name="learnable.totalActivationStrategy" type="string">DefaultTotalActivationStrategy</param>                </task>                <task name="ThingCollidedDetector">                    <tasktype>ThingCollidedDetector</tasktype>                    <ticksperrun>3</ticksperrun>                    <param name="node" type="string">thingCollided</param>                    <param name="learnable.baseLevelActivation" type="double">0.0</param>                    <param name="learnable.baseLevelRemovalThreshold" type="double">-1.0</param>                    <param name="learnable.baseLevelDecayStrategy" type="string">defaultDecay</param>                    <param name="learnable.baseLevelExciteStrategy" type="string">defaultExcite</param>                    <param name="learnable.totalActivationStrategy" type="string">DefaultTotalActivationStrategy</param>                </task>                <task name="WallFrontDetector">                    <tasktype>WallFrontDetector</tasktype>                    <ticksperrun>3</ticksperrun>                    <param name="node" type="string">wallFront</param>                    <param name="learnable.baseLevelActivation" type="double">0.0</param>                    <param name="learnable.baseLevelRemovalThreshold" type="double">-1.0</param>                    <param name="learnable.baseLevelDecayStrategy" type="string">defaultDecay</param>                    <param name="learnable.baseLevelExciteStrategy" type="string">defaultExcite</param>                    <param name="learnable.totalActivationStrategy" type="string">DefaultTotalActivationStrategy</param>                </task>                <task name="RandomDetector">                    <tasktype>RandomDetector</tasktype>                    <ticksperrun>3</ticksperrun>                    <param name="node" type="string">random</param>                    <param name="learnable.baseLevelActivation" type="double">0.0</param>                    <param name="learnable.baseLevelRemovalThreshold" type="double">-1.0</param>                    <param name="learnable.baseLevelDecayStrategy" type="string">defaultDecay</param>                    <param name="learnable.baseLevelExciteStrategy" type="string">defaultExcite</param>                    <param name="learnable.totalActivationStrategy" type="string">DefaultTotalActivationStrategy</param>                </task>                <task name="RotateDetector">                    <tasktype>RotateDetector</tasktype>                    <ticksperrun>3</ticksperrun>                    <param name="node" type="string">rotate</param>                    <param name="learnable.baseLevelActivation" type="double">0.0</param>                    <param name="learnable.baseLevelRemovalThreshold" type="double">-1.0</param>                    <param name="learnable.baseLevelDecayStrategy" type="string">defaultDecay</param>                    <param name="learnable.baseLevelExciteStrategy" type="string">defaultExcite</param>                    <param name="learnable.totalActivationStrategy" type="string">DefaultTotalActivationStrategy</param>                </task>                <task name="DeliveryDetector">                    <tasktype>DeliveryDetector</tasktype>                    <ticksperrun>3</ticksperrun>                    <param name="node" type="string">delivery</param>                    <param name="learnable.baseLevelActivation" type="double">0.0</param>                    <param name="learnable.baseLevelRemovalThreshold" type="double">-1.0</param>                    <param name="learnable.baseLevelDecayStrategy" type="string">defaultDecay</param>                    <param name="learnable.baseLevelExciteStrategy" type="string">defaultExcite</param>                    <param name="learnable.totalActivationStrategy" type="string">DefaultTotalActivationStrategy</param>                </task>            </initialTasks>            <initializerclass>edu.memphis.ccrg.lida.pam.BasicPamInitializer</initializerclass>        </module>        <module name="Workspace">            <class>edu.memphis.ccrg.lida.workspace.WorkspaceImpl</class>            <submodules>                <module name="PerceptualBuffer">                    <class>edu.memphis.ccrg.lida.workspace.workspacebuffers.WorkspaceBufferImpl</class>                    <taskspawner>defaultTS</taskspawner>                </module>                <module name="CurrentSituationalModel">                    <class>edu.memphis.ccrg.lida.workspace.workspacebuffers.WorkspaceBufferImpl</class>                    <taskspawner>defaultTS</taskspawner>                </module>                <module name="BroadcastQueue">                    <class>edu.memphis.ccrg.lida.workspace.workspacebuffers.BroadcastQueueImpl</class>                    <param name="workspace.broadcastQueueCapacity" type="int">20 </param>                    <taskspawner>defaultTS</taskspawner>                </module>            </submodules>            <taskspawner>defaultTS</taskspawner>            <initialTasks>                <task name="CueBackgroundTask">                    <tasktype>CueBackgroundTask</tasktype>                    <ticksperrun>15</ticksperrun>                    <param name="workspace.actThreshold"  type="double">0.4</param>                    <param name="workspace.cueingThreshold"  type="double">0.4</param>                    <param name="learnable.baseLevelActivation" type="double">0.0</param>                    <param name="learnable.baseLevelRemovalThreshold" type="double">-1.0</param>                    <param name="learnable.baseLevelDecayStrategy" type="string">defaultDecay</param>                    <param name="learnable.baseLevelExciteStrategy" type="string">defaultExcite</param>                    <param name="learnable.totalActivationStrategy" type="string">DefaultTotalActivationStrategy</param>                </task>                <task name="UpdateCsmBackgroundTask">                    <tasktype>UpdateCsmBackgroundTask</tasktype>                    <ticksperrun>5</ticksperrun>                    <param name="learnable.baseLevelActivation" type="double">0.0</param>                    <param name="learnable.baseLevelRemovalThreshold" type="double">-1.0</param>                    <param name="learnable.baseLevelDecayStrategy" type="string">defaultDecay</param>                    <param name="learnable.baseLevelExciteStrategy" type="string">defaultExcite</param>                    <param name="learnable.totalActivationStrategy" type="string">DefaultTotalActivationStrategy</param>                </task>            </initialTasks>        </module>        <module name="AttentionModule">            <class>edu.memphis.ccrg.lida.attentioncodelets.AttentionCodeletModule</class>            <associatedmodule>Workspace</associatedmodule>            <associatedmodule>GlobalWorkspace</associatedmodule>            <param name="attentionModule.defaultCodeletType">BasicAttentionCodelet</param>	    <param name="attentionModule.codeletActivation" type="double">1.0</param>	    <param name="attentionModule.codeletRemovalThreshold" type="double">-1.0</param>	    <param name="attentionModule.codeletReinforcement" type="double">0.1</param>            <taskspawner>defaultTS</taskspawner>            <initialTasks>                                <task name="ThingToGetAttetionCodelet">                    <tasktype>BasicAttentionCodelet</tasktype>                    <ticksperrun>5</ticksperrun>                    <param name="nodes" type="string">thingToGet</param>                    <param name="refractoryPeriod" type="int">200</param>                    <param name="initialActivation" type="double">1.0</param>                    <param name="learnable.baseLevelActivation" type="double">1.0</param>                    <param name="learnable.baseLevelRemovalThreshold" type="double">-1.0</param>                    <param name="learnable.baseLevelDecayStrategy" type="string">defaultDecay</param>                    <param name="learnable.baseLevelExciteStrategy" type="string">defaultExcite</param>                    <param name="learnable.totalActivationStrategy" type="string">DefaultTotalActivationStrategy</param>                </task>                <task name="ThingDirectionAttentionCodelet">                    <tasktype>BasicAttentionCodelet</tasktype>                    <ticksperrun>5</ticksperrun>                    <param name="nodes" type="string">thingDirection</param>                    <param name="refractoryPeriod" type="int">200</param>                    <param name="initialActivation" type="double">1.0</param>                    <param name="learnable.baseLevelActivation" type="double">1.0</param>                    <param name="learnable.baseLevelRemovalThreshold" type="double">-1.0</param>                    <param name="learnable.baseLevelDecayStrategy" type="string">defaultDecay</param>                    <param name="learnable.baseLevelExciteStrategy" type="string">defaultExcite</param>                    <param name="learnable.totalActivationStrategy" type="string">DefaultTotalActivationStrategy</param>                </task>                <task name="ThingCollidedAttentionCodelet">                    <tasktype>BasicAttentionCodelet</tasktype>                    <ticksperrun>5</ticksperrun>                    <param name="nodes" type="string">thingCollided</param>                    <param name="refractoryPeriod" type="int">200</param>                    <param name="initialActivation" type="double">1.0</param>                    <param name="learnable.baseLevelActivation" type="double">1.0</param>                    <param name="learnable.baseLevelRemovalThreshold" type="double">-1.0</param>                    <param name="learnable.baseLevelDecayStrategy" type="string">defaultDecay</param>                    <param name="learnable.baseLevelExciteStrategy" type="string">defaultExcite</param>                    <param name="learnable.totalActivationStrategy" type="string">DefaultTotalActivationStrategy</param>                </task>                <task name="WallFrontAttentionCodelet">                    <tasktype>BasicAttentionCodelet</tasktype>                    <ticksperrun>5</ticksperrun>                    <param name="nodes" type="string">wallFront</param>                    <param name="refractoryPeriod" type="int">200</param>                    <param name="initialActivation" type="double">1.0</param>                    <param name="learnable.baseLevelActivation" type="double">1.0</param>                    <param name="learnable.baseLevelRemovalThreshold" type="double">-1.0</param>                    <param name="learnable.baseLevelDecayStrategy" type="string">defaultDecay</param>                    <param name="learnable.baseLevelExciteStrategy" type="string">defaultExcite</param>                    <param name="learnable.totalActivationStrategy" type="string">DefaultTotalActivationStrategy</param>                </task>                               <task name="RandomAttentionCodelet">                    <tasktype>BasicAttentionCodelet</tasktype>                    <ticksperrun>5</ticksperrun>                    <param name="nodes" type="string">random</param>                    <param name="refractoryPeriod" type="int">200</param>                    <param name="initialActivation" type="double">1.0</param>                    <param name="learnable.baseLevelActivation" type="double">1.0</param>                    <param name="learnable.baseLevelRemovalThreshold" type="double">-1.0</param>                    <param name="learnable.baseLevelDecayStrategy" type="string">defaultDecay</param>                    <param name="learnable.baseLevelExciteStrategy" type="string">defaultExcite</param>                    <param name="learnable.totalActivationStrategy" type="string">DefaultTotalActivationStrategy</param>                </task>                                <task name="RotateAttentionCodelet">                    <tasktype>BasicAttentionCodelet</tasktype>                    <ticksperrun>5</ticksperrun>                    <param name="nodes" type="string">rotate</param>                    <param name="refractoryPeriod" type="int">200</param>                    <param name="learnable.baseLevelActivation" type="double">1.0</param>                    <param name="learnable.baseLevelRemovalThreshold" type="double">-1.0</param>                    <param name="learnable.baseLevelDecayStrategy" type="string">defaultDecay</param>                    <param name="learnable.baseLevelExciteStrategy" type="string">defaultExcite</param>                    <param name="learnable.totalActivationStrategy" type="string">DefaultTotalActivationStrategy</param>                </task>                                <task name="DeliveryAttentionCodelet">                    <tasktype>BasicAttentionCodelet</tasktype>                    <ticksperrun>5</ticksperrun>                    <param name="nodes" type="string">delivery</param>                    <param name="refractoryPeriod" type="int">200</param>                    <param name="initialActivation" type="double">1.0</param>                    <param name="learnable.baseLevelActivation" type="double">1.0</param>                    <param name="learnable.baseLevelRemovalThreshold" type="double">-1.0</param>                    <param name="learnable.baseLevelDecayStrategy" type="string">defaultDecay</param>                    <param name="learnable.baseLevelExciteStrategy" type="string">defaultExcite</param>                    <param name="learnable.totalActivationStrategy" type="string">DefaultTotalActivationStrategy</param>                </task>                            </initialTasks>        </module>        <module name="StructureBuildingCodeletModule">            <class>edu.memphis.ccrg.lida.workspace.structurebuildingcodelets.StructureBuildingCodeletModule</class>            <associatedmodule>Workspace</associatedmodule>            <param name="sbcModule.defaultCodeletType" type="string">BasicStructureBuildingCodelet</param>            <param name="sbcModule.codeletActivation" type="double">1.0</param>            <param name="sbcModule.codeletRemovalThreshold" type="double">-1.0</param>            <taskspawner>defaultTS</taskspawner>        </module>        <module name="GlobalWorkspace">            <class>edu.memphis.ccrg.lida.globalworkspace.GlobalWorkspaceImpl</class>            <param name="globalWorkspace.coalitionRemovalThreshold" type="double">0.0</param>            <param name="globalWorkspace.coalitionDecayStrategy">coalitionDecay</param>            <param name="globalWorkspace.refractoryPeriod" type="int">40</param>            <!-- Trigger parameters -->            <param name="globalWorkspace.delayNoBroadcast" type="int">100</param>            <param name="globalWorkspace.delayNoNewCoalition" type="int">50</param>            <param name="globalWorkspace.aggregateActivationThreshold" type="double">2.0</param>            <param name="globalWorkspace.individualActivationThreshold" type="double">0.9</param>            <taskspawner>defaultTS</taskspawner>            <initializerclass>edu.memphis.ccrg.lida.globalworkspace.GlobalWorkspaceInitalizer</initializerclass>        </module>         <module name="ProceduralMemory">            <class>edu.memphis.ccrg.lida.proceduralmemory.ProceduralMemoryImpl</class>            <param name="proceduralMemory.ticksPerStep" type="int">14 </param>            <param name="proceduralMemory.conditionDecayStrategy">defaultDecay</param>            <param name="proceduralMemory.schemeSelectionThreshold" type="double">0.1</param>            <param name="proceduralMemory.contextWeight" type="double">1.0</param>            <param name="proceduralMemory.addingListWeight"  type="double">1.0</param>            <param name="proceduralMemory.schemeClass">edu.memphis.ccrg.lida.proceduralmemory.SchemeImpl</param>            <!--   ____scheme_name__ _____ scheme_label_______|_context______|__action_name____|result|baseLabelActiv. -->            <!--<param name="scheme.1">if no leaflet jewel, rotate|(jewel)()|action.rotate|()()|0.3</param>-->            <!--<param name="scheme.2">if leaflet jewel, goto jewel|(leafletJewel)()|action.gotoJewel|()()|0.3</param>            <param name="scheme.3">if food, goto food|(food)()|action.gotoFood|()()|0.3</param>            <param name="scheme.4">if nearObject, get object|(nearObject)()|action.get|()()|0.01</param>-->            <param name="scheme.1">if wallFront, avoid|(wallFront)()|action.avoid|()()|0.4</param>            <param name="scheme.2">if thingDirection, move|(thingDirection)()|action.move|()()|0.4</param>            <param name="scheme.3">if thingToGet, get|(thingToGet)()|action.get|()()|0.4</param>            <param name="scheme.4">if thingCollided, bury|(thingCollided)()|action.bury|()()|0.4</param>            <param name="scheme.5">if random, random|(random)()|action.random|()()|0.4</param>            <param name="scheme.6">if rotate, rotate|(rotate)()|action.rotate|()()|0.4</param>            <param name="scheme.7">if delivery, delivery|(delivery)()|action.delivery|()()|0.4</param>            <!--<param name="scheme.3">if noWallFront wallRight wallLeft, go ahead|(noWallFront,wallRight,wallLeft)()|action.goAhead|()()|0.4</param>                        <param name="scheme.1">if leafletJewel noWallFront, go ahead|(leafletJewel, noWallFront)()|action.goAhead|()()|0.8</param>            <param name="scheme.4">if food noWallFront, go ahead|(food, noWallFront)()|action.goAhead|()()|0.8</param>                        <param name="scheme.2">if wallFront wallNear, turn right|(wallFront, wallNear)()|action.turnRight|()()|0.6</param>                        <param name="scheme.9">if nearObject and food, get object|(nearObject)()|action.get|()()|0.01</param>            <param name="scheme.10">if nearObject and leafletJewel, get object|(nearObject)()|action.get|()()|0.01</param>-->                        <!--<param name="scheme.7">if noWallFront noWallRight wallLeft, turn right|(noWallFront,noWallRight,wallLeft)()|action.turnRight|()()|0.5</param>            <param name="scheme.6">if noWallFront wallRight noWallLeft, turn left|(noWallFront,wallRight,noWallLeft)()|action.turnLeft|()()|0.5</param>-->            <!--<param name="scheme.4">if noWallFront noWallRight wallLeft, go ahead|(noWallFront,noWallRight,wallLeft)()|action.goAhead|()()|0.5</param>            <param name="scheme.7">if noWallFront noWallRight wallLeft, turn right|(noWallFront,noWallRight,wallLeft)()|action.turnRight|()()|0.5</param>-->            <!--<param name="scheme.4">if noWallFront wallRight noWallLeft, turn left|(noWallFront,wallRight,noWallLeft)()|action.turnLeft|()()|0.4</param>            <param name="scheme.7">if noWallFront noWallRight wallLeft, turn right|(noWallFront,noWallRight,wallLeft)()|action.turnRight|()()|0.4</param>-->            <!--<param name="scheme.4">if noWallFront noWallRight noWallLeft, go ahead|(noWallFront,noWallRight,noWallLeft)()|action.goAhead|()()|0.01</param>-->            <!--<param name="scheme.5">if wallFront wallRight, turn left|(wallFront wallRight,noWallLeft,wallNear)()|action.turnLeft|()()|0.7</param>            <param name="scheme.12">if wallFront wallLeft, turn right|(wallFront,noWallRight,wallLeft,wallNear)()|action.turnRight|()()|0.7</param>-->            <!--<param name="scheme.7">turn right if wallFront noWallRight noWallLeft|(wallFront, noWallRight, noWallLeft)()|action.turnRight|()()|0.4</param>-->            <!--<param name="scheme.12">turn right if wallFront noWallRight wallLeft wallNear|(wallFront, noWallRight, wallLeft, wallNear)()|action.turnRight|()()|0.4</param>-->            <!--<param name="scheme.1">if wallFront wallRight noWallLeft wallNear, turn left|(wallNear)()|action.turnLeft|()()|0.4</param>            <param name="scheme.2">if wallFront noWallRight wallLeft wallNear, turn right|(wallNear)()|action.turnRight|()()|0.4</param>            <param name="scheme.3">if noWallFront wallRight wallLeft, go ahead|(noWallFront, wallRight, wallLeft)()|action.goAhead|()()|0.4</param>            <param name="scheme.4">if noWallFront noWallRight noWallLeft, go ahead|(noWallFront, noWallRight, noWallLeft)()|action.goAhead|()()|0.4</param>            <param name="scheme.5">if wallFront wallRight wallLeft wallNear, go back|(wallNear)()|action.goBack|()()|0.4</param>            <param name="scheme.6">if noWallFront wallRight noWallLeft wallNear, turn left|(noWallFront, wallRight, noWallLeft)()|action.turnLeft|()()|0.4</param>            <param name="scheme.11">if noWallFront wallRight noWallLeft, go ahead|(noWallFront, wallRight, noWallLeft)()|action.goAhead|()()|0.4</param>            <param name="scheme.7">if wallFront noWallRight noWallLeft and wallNear, go back|(wallNear)()|action.goBack|()()|0.4</param>            <param name="scheme.12">if wallFront noWallRight noWallLeft, turn right|(wallFront, noWallRight, noWallLeft)()|action.turnRight|()()|0.4</param>            <param name="scheme.8">if noWallFront noWallRight wallLeft and wallNear, turn right|(noWallFront, noWallRight, wallLeft)()|action.turnRight|()()|0.4</param>            <param name="scheme.12">if noWallFront noWallRight wallLeft, go ahead|(noWallFront, noWallRight, wallLeft)()|action.goAhead|()()|0.4</param>            <param name="scheme.9">if nearObject food, get object|(nearObject)()|action.get|()()|0.01</param>            <param name="scheme.10">if nearObject leafletJewel, get object|(nearObject)()|action.get|()()|0.01</param>-->                                                          <taskspawner>defaultTS</taskspawner>                                  <initializerclass>edu.memphis.ccrg.lida.proceduralmemory.BasicProceduralMemoryInitializer</initializerclass>        </module>        <module name="ActionSelection">            <class>edu.memphis.ccrg.lida.actionselection.BasicActionSelection</class>            <param name="actionSelection.ticksPerStep" type="int">10 </param>            <param name="actionSelection.refractoryPeriodTicks" type="int">80</param>            <param name="actionSelection.candidateThreshold" type="double">0.8</param>             <param name="actionSelection.removalThreshold" type="double">0.1</param>            <param name="actionSelection.backgroundTaskTicksPerRun" type="int">10</param>             <param name="actionSelection.behaviorDecayStrategy" type="string">defaultDecay</param>            <param name="actionSelection.thresholdDecayRate" type="double">0.1</param>            <taskspawner>defaultTS</taskspawner>        </module>        <module name="SensoryMotorMemory">            <class>edu.memphis.ccrg.lida.sensorymotormemory.BasicSensoryMotorMemory</class>            <associatedmodule>Environment</associatedmodule>            <param name="smm.processActionTaskTicks" type="int">1</param>            <!--<param name="smm.mapping.1">action.rotate,algorithm.rotate</param>-->            <!--<param name="smm.mapping.1">action.gotoFood,algorithm.gotoFood</param>            <param name="smm.mapping.2">action.gotoJewel,algorithm.gotoJewel</param>-->            <param name="smm.mapping.1">action.get,algorithm.get</param>            <param name="smm.mapping.2">action.avoid,algorithm.avoid</param>            <param name="smm.mapping.3">action.rotate,algorithm.rotate</param>            <param name="smm.mapping.4">action.move,algorithm.move</param>            <param name="smm.mapping.5">action.random,algorithm.random</param>            <param name="smm.mapping.6">action.delivery,algorithm.delivery</param>            <param name="smm.mapping.7">action.bury,algorithm.bury</param>                                   <taskspawner>defaultTS</taskspawner>            <initializerclass>edu.memphis.ccrg.lida.sensorymotormemory.BasicSensoryMotorMemoryInitializer</initializerclass>        </module>    </submodules>    <listeners>        <listener>            <listenertype>edu.memphis.ccrg.lida.pam.PamListener</listenertype>            <modulename>PerceptualAssociativeMemory</modulename>            <listenername>Workspace</listenername>        </listener>            <listener>            <listenertype>edu.memphis.ccrg.lida.globalworkspace.BroadcastListener</listenertype>            <modulename>GlobalWorkspace</modulename>            <listenername>ProceduralMemory</listenername>        </listener>        <listener>            <listenertype>edu.memphis.ccrg.lida.proceduralmemory.ProceduralMemoryListener</listenertype>            <modulename>ProceduralMemory</modulename>            <listenername>ActionSelection</listenername>        </listener>        <listener>            <listenertype>edu.memphis.ccrg.lida.actionselection.ActionSelectionListener</listenertype>            <modulename>ActionSelection</modulename>            <listenername>SensoryMotorMemory</listenername>        </listener>    </listeners></lida>